module list

import nat
import bool

data list a = nil | cons a (list a)
 

|||return length of  any given list
length: list a -> nat
length nil = O
length (cons n l') = S (length l') 
 

|||return result of appending 2 lists
append: list a -> list a -> list a
append nil l2 = l2
append (cons n l1') l2 = cons n (append l1' l2)

|||return result of appending 2 lists
append': list' a -> list' a -> list' a
append' nil' l2 = l2
append' (n :: l1') l2 =  n :: (append' l1' l2

lO: list nat
lO= nil --empty list

l1: list nat  --O  
l1= cons O nil --second argument must bs smaller, lO would work too

l2: list nat
l2 = (cons (S O) (cons (S (S O)) nil)) --returns 1,2

l3: list nat
l3= (cons (S O) (cons (S (S O)) (cons (S (S (S O))) nil )))
