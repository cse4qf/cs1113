module natTest

import pair
import bool
import nat

-- HOMEWORK 12 
-- Use the REPL to verify that these tests return the
-- expected results

||| a test, expecting O
h1: nat
h1 = addp (mkPair O O)

||| a test, expecting S (S O)
h2: nat
h2 = addp (mkPair O (S (S O)))

||| a test, expecting (S O)
h3: nat
h3 = addp (mkPair (S O) O)

||| a test, expecting (S (S (S (S (S O)))))
h4: nat 
h4 = addp (mkPair (S (S O)) (S (S (S O))))

--multiplication test cases
m1:nat
m1 = multp (mkPair O  (S(O)) ) 
m2: nat
m2= multp (mkPair (S O) (S (S (O)) ) ) 
m3: nat
m3 =multp (mkPair (S (S (O))) (S(S(O))) )

--factorial test cases
f1: nat
f1 = factp O
f2:nat
f2 = factp (S (S (S (O)))) 
f3: nat
f3 = factp (S (S (O)))

--Hw due 9/25
--test case for nat.idr

--5: test case for exp
e1: nat 
e1= exp (mkPair O (S(O)))

e2: nat 
e2= exp (mkPair (S(O)) (O))

e3: nat 
e3= exp (mkPair (S(S(O))) (S(S(S(O)))))

--6: test case for lep
l1: bool
l1 = lep (mkPair (O) (S(O)))

l2: bool
l2 = lep (mkPair (O) (O) )

l3: bool
l3 = lep (mkPair (S(S(O))) ( S(O)))  

--7: test case for eqp
eq1: bool 
eq1= eqp (mkPair (S(O)) O)

eq2: bool 
eq2= eqp (mkPair (S(O))  (S(O)))

eq3: bool
eq3 = eqp (mkPair O O)

--8: test case for gtp
gt1: bool 
gt1= gtp (mkPair (S(O)) (O))

gt2: bool 
gt2= gtp (mkPair (S(O)) (S(O)))

gt3: bool
gt3= gtp (mkPair (O) (S(O)) )

--9 test case for gep
g1: bool 
g1= gep (mkPair (S(O))(O))

g2: bool 
g2= gep (mkPair (S(O)) (S(O)))

g3: bool
g3= gep (mkPair (O) (S(O)))


--10: test case for ltp
lt1: bool 
lt1= ltp (mkPair (S(O))(O))

lt2: bool 
lt2= ltp (mkPair (S(O)) (S(S(O))))
 
lt3:bool
lt3 = ltp (mkPair (S(O)) (S(S(O))) )
 
--Extra Credit Fibonacci testcase
fib1: nat
fib1 = fib (O)

fib2: nat
fib2 = fib( S(O))

fib3: nat
fib3 = fib( S(S(O)))
(
